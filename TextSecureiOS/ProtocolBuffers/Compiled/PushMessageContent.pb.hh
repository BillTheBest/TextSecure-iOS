// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushMessageContent.proto

#ifndef PROTOBUF_PushMessageContent_2eproto__INCLUDED
#define PROTOBUF_PushMessageContent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PushMessageContent_2eproto();
void protobuf_AssignDesc_PushMessageContent_2eproto();
void protobuf_ShutdownFile_PushMessageContent_2eproto();

class PushMessageContent;
class PushMessageContent_AttachmentPointer;

// ===================================================================

class PushMessageContent_AttachmentPointer : public ::google::protobuf::Message {
 public:
  PushMessageContent_AttachmentPointer();
  virtual ~PushMessageContent_AttachmentPointer();

  PushMessageContent_AttachmentPointer(const PushMessageContent_AttachmentPointer& from);

  inline PushMessageContent_AttachmentPointer& operator=(const PushMessageContent_AttachmentPointer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMessageContent_AttachmentPointer& default_instance();

  void Swap(PushMessageContent_AttachmentPointer* other);

  // implements Message ----------------------------------------------

  PushMessageContent_AttachmentPointer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMessageContent_AttachmentPointer& from);
  void MergeFrom(const PushMessageContent_AttachmentPointer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string contentType = 2;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 2;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:textsecure.PushMessageContent.AttachmentPointer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* contenttype_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PushMessageContent_2eproto();
  friend void protobuf_AssignDesc_PushMessageContent_2eproto();
  friend void protobuf_ShutdownFile_PushMessageContent_2eproto();

  void InitAsDefaultInstance();
  static PushMessageContent_AttachmentPointer* default_instance_;
};
// -------------------------------------------------------------------

class PushMessageContent : public ::google::protobuf::Message {
 public:
  PushMessageContent();
  virtual ~PushMessageContent();

  PushMessageContent(const PushMessageContent& from);

  inline PushMessageContent& operator=(const PushMessageContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMessageContent& default_instance();

  void Swap(PushMessageContent* other);

  // implements Message ----------------------------------------------

  PushMessageContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMessageContent& from);
  void MergeFrom(const PushMessageContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PushMessageContent_AttachmentPointer AttachmentPointer;

  // accessors -------------------------------------------------------

  // optional string body = 1;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 2;
  inline const ::textsecure::PushMessageContent_AttachmentPointer& attachments(int index) const;
  inline ::textsecure::PushMessageContent_AttachmentPointer* mutable_attachments(int index);
  inline ::textsecure::PushMessageContent_AttachmentPointer* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::textsecure::PushMessageContent_AttachmentPointer >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::textsecure::PushMessageContent_AttachmentPointer >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:textsecure.PushMessageContent)
 private:
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* body_;
  ::google::protobuf::RepeatedPtrField< ::textsecure::PushMessageContent_AttachmentPointer > attachments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PushMessageContent_2eproto();
  friend void protobuf_AssignDesc_PushMessageContent_2eproto();
  friend void protobuf_ShutdownFile_PushMessageContent_2eproto();

  void InitAsDefaultInstance();
  static PushMessageContent* default_instance_;
};
// ===================================================================


// ===================================================================

// PushMessageContent_AttachmentPointer

// optional fixed64 id = 1;
inline bool PushMessageContent_AttachmentPointer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMessageContent_AttachmentPointer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMessageContent_AttachmentPointer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMessageContent_AttachmentPointer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PushMessageContent_AttachmentPointer::id() const {
  return id_;
}
inline void PushMessageContent_AttachmentPointer::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string contentType = 2;
inline bool PushMessageContent_AttachmentPointer::has_contenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMessageContent_AttachmentPointer::set_has_contenttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMessageContent_AttachmentPointer::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMessageContent_AttachmentPointer::clear_contenttype() {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    contenttype_->clear();
  }
  clear_has_contenttype();
}
inline const ::std::string& PushMessageContent_AttachmentPointer::contenttype() const {
  return *contenttype_;
}
inline void PushMessageContent_AttachmentPointer::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void PushMessageContent_AttachmentPointer::set_contenttype(const char* value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void PushMessageContent_AttachmentPointer::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushMessageContent_AttachmentPointer::mutable_contenttype() {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  return contenttype_;
}
inline ::std::string* PushMessageContent_AttachmentPointer::release_contenttype() {
  clear_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contenttype_;
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushMessageContent_AttachmentPointer::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (contenttype) {
    set_has_contenttype();
    contenttype_ = contenttype;
  } else {
    clear_has_contenttype();
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes key = 3;
inline bool PushMessageContent_AttachmentPointer::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushMessageContent_AttachmentPointer::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushMessageContent_AttachmentPointer::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushMessageContent_AttachmentPointer::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PushMessageContent_AttachmentPointer::key() const {
  return *key_;
}
inline void PushMessageContent_AttachmentPointer::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PushMessageContent_AttachmentPointer::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PushMessageContent_AttachmentPointer::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushMessageContent_AttachmentPointer::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PushMessageContent_AttachmentPointer::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushMessageContent_AttachmentPointer::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PushMessageContent

// optional string body = 1;
inline bool PushMessageContent::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMessageContent::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMessageContent::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMessageContent::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& PushMessageContent::body() const {
  return *body_;
}
inline void PushMessageContent::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PushMessageContent::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PushMessageContent::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushMessageContent::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* PushMessageContent::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushMessageContent::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
inline int PushMessageContent::attachments_size() const {
  return attachments_.size();
}
inline void PushMessageContent::clear_attachments() {
  attachments_.Clear();
}
inline const ::textsecure::PushMessageContent_AttachmentPointer& PushMessageContent::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::textsecure::PushMessageContent_AttachmentPointer* PushMessageContent::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::textsecure::PushMessageContent_AttachmentPointer* PushMessageContent::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::textsecure::PushMessageContent_AttachmentPointer >&
PushMessageContent::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::textsecure::PushMessageContent_AttachmentPointer >*
PushMessageContent::mutable_attachments() {
  return &attachments_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PushMessageContent_2eproto__INCLUDED
