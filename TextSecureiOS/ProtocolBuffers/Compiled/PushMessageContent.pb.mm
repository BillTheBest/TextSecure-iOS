// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushMessageContent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushMessageContent.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* PushMessageContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMessageContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMessageContent_AttachmentPointer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMessageContent_AttachmentPointer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushMessageContent_2eproto() {
  protobuf_AddDesc_PushMessageContent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushMessageContent.proto");
  GOOGLE_CHECK(file != NULL);
  PushMessageContent_descriptor_ = file->message_type(0);
  static const int PushMessageContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent, attachments_),
  };
  PushMessageContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMessageContent_descriptor_,
      PushMessageContent::default_instance_,
      PushMessageContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMessageContent));
  PushMessageContent_AttachmentPointer_descriptor_ = PushMessageContent_descriptor_->nested_type(0);
  static const int PushMessageContent_AttachmentPointer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent_AttachmentPointer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent_AttachmentPointer, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent_AttachmentPointer, key_),
  };
  PushMessageContent_AttachmentPointer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMessageContent_AttachmentPointer_descriptor_,
      PushMessageContent_AttachmentPointer::default_instance_,
      PushMessageContent_AttachmentPointer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent_AttachmentPointer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageContent_AttachmentPointer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMessageContent_AttachmentPointer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushMessageContent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMessageContent_descriptor_, &PushMessageContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMessageContent_AttachmentPointer_descriptor_, &PushMessageContent_AttachmentPointer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushMessageContent_2eproto() {
  delete PushMessageContent::default_instance_;
  delete PushMessageContent_reflection_;
  delete PushMessageContent_AttachmentPointer::default_instance_;
  delete PushMessageContent_AttachmentPointer_reflection_;
}

void protobuf_AddDesc_PushMessageContent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030PushMessageContent.proto\022\ntextsecure\"\254"
    "\001\n\022PushMessageContent\022\014\n\004body\030\001 \001(\t\022E\n\013a"
    "ttachments\030\002 \003(\01320.textsecure.PushMessag"
    "eContent.AttachmentPointer\032A\n\021Attachment"
    "Pointer\022\n\n\002id\030\001 \001(\006\022\023\n\013contentType\030\002 \001(\t"
    "\022\013\n\003key\030\003 \001(\014", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushMessageContent.proto", &protobuf_RegisterTypes);
  PushMessageContent::default_instance_ = new PushMessageContent();
  PushMessageContent_AttachmentPointer::default_instance_ = new PushMessageContent_AttachmentPointer();
  PushMessageContent::default_instance_->InitAsDefaultInstance();
  PushMessageContent_AttachmentPointer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushMessageContent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushMessageContent_2eproto {
  StaticDescriptorInitializer_PushMessageContent_2eproto() {
    protobuf_AddDesc_PushMessageContent_2eproto();
  }
} static_descriptor_initializer_PushMessageContent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PushMessageContent_AttachmentPointer::kIdFieldNumber;
const int PushMessageContent_AttachmentPointer::kContentTypeFieldNumber;
const int PushMessageContent_AttachmentPointer::kKeyFieldNumber;
#endif  // !_MSC_VER

PushMessageContent_AttachmentPointer::PushMessageContent_AttachmentPointer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMessageContent_AttachmentPointer::InitAsDefaultInstance() {
}

PushMessageContent_AttachmentPointer::PushMessageContent_AttachmentPointer(const PushMessageContent_AttachmentPointer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageContent_AttachmentPointer::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageContent_AttachmentPointer::~PushMessageContent_AttachmentPointer() {
  SharedDtor();
}

void PushMessageContent_AttachmentPointer::SharedDtor() {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void PushMessageContent_AttachmentPointer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMessageContent_AttachmentPointer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMessageContent_AttachmentPointer_descriptor_;
}

const PushMessageContent_AttachmentPointer& PushMessageContent_AttachmentPointer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PushMessageContent_2eproto();
  return *default_instance_;
}

PushMessageContent_AttachmentPointer* PushMessageContent_AttachmentPointer::default_instance_ = NULL;

PushMessageContent_AttachmentPointer* PushMessageContent_AttachmentPointer::New() const {
  return new PushMessageContent_AttachmentPointer;
}

void PushMessageContent_AttachmentPointer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
        contenttype_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMessageContent_AttachmentPointer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contentType;
        break;
      }

      // optional string contentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageContent_AttachmentPointer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional string contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contenttype(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMessageContent_AttachmentPointer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional string contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contenttype(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMessageContent_AttachmentPointer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional string contentType = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageContent_AttachmentPointer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMessageContent_AttachmentPointer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMessageContent_AttachmentPointer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMessageContent_AttachmentPointer::MergeFrom(const PushMessageContent_AttachmentPointer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMessageContent_AttachmentPointer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessageContent_AttachmentPointer::CopyFrom(const PushMessageContent_AttachmentPointer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageContent_AttachmentPointer::IsInitialized() const {

  return true;
}

void PushMessageContent_AttachmentPointer::Swap(PushMessageContent_AttachmentPointer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMessageContent_AttachmentPointer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMessageContent_AttachmentPointer_descriptor_;
  metadata.reflection = PushMessageContent_AttachmentPointer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PushMessageContent::kBodyFieldNumber;
const int PushMessageContent::kAttachmentsFieldNumber;
#endif  // !_MSC_VER

PushMessageContent::PushMessageContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMessageContent::InitAsDefaultInstance() {
}

PushMessageContent::PushMessageContent(const PushMessageContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageContent::SharedCtor() {
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageContent::~PushMessageContent() {
  SharedDtor();
}

void PushMessageContent::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void PushMessageContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMessageContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMessageContent_descriptor_;
}

const PushMessageContent& PushMessageContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PushMessageContent_2eproto();
  return *default_instance_;
}

PushMessageContent* PushMessageContent::default_instance_ = NULL;

PushMessageContent* PushMessageContent::New() const {
  return new PushMessageContent;
}

void PushMessageContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  attachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMessageContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachments;
        break;
      }

      // repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->body(), output);
  }

  // repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
  for (int i = 0; i < this->attachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attachments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMessageContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body(), target);
  }

  // repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
  for (int i = 0; i < this->attachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attachments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMessageContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

  }
  // repeated .textsecure.PushMessageContent.AttachmentPointer attachments = 2;
  total_size += 1 * this->attachments_size();
  for (int i = 0; i < this->attachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMessageContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMessageContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMessageContent::MergeFrom(const PushMessageContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachments_.MergeFrom(from.attachments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMessageContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessageContent::CopyFrom(const PushMessageContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageContent::IsInitialized() const {

  return true;
}

void PushMessageContent::Swap(PushMessageContent* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    attachments_.Swap(&other->attachments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMessageContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMessageContent_descriptor_;
  metadata.reflection = PushMessageContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
